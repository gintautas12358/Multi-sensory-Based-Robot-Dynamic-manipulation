// Generated by gencpp from file control_core_msgs/CartesianState.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_CARTESIANSTATE_H
#define CONTROL_CORE_MSGS_MESSAGE_CARTESIANSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Wrench.h>

namespace control_core_msgs
{
template <class ContainerAllocator>
struct CartesianState_
{
  typedef CartesianState_<ContainerAllocator> Type;

  CartesianState_()
    : position()
    , velocity()
    , acceleration()
    , wrench()  {
    }
  CartesianState_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , wrench(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;





  typedef boost::shared_ptr< ::control_core_msgs::CartesianState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::CartesianState_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianState_

typedef ::control_core_msgs::CartesianState_<std::allocator<void> > CartesianState;

typedef boost::shared_ptr< ::control_core_msgs::CartesianState > CartesianStatePtr;
typedef boost::shared_ptr< ::control_core_msgs::CartesianState const> CartesianStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::CartesianState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::CartesianState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::CartesianState_<ContainerAllocator1> & lhs, const ::control_core_msgs::CartesianState_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.wrench == rhs.wrench;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::CartesianState_<ContainerAllocator1> & lhs, const ::control_core_msgs::CartesianState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::CartesianState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::CartesianState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::CartesianState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::CartesianState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::CartesianState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::CartesianState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::CartesianState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "146c974b35b122ce7c95e4a628f8c6ef";
  }

  static const char* value(const ::control_core_msgs::CartesianState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x146c974b35b122ceULL;
  static const uint64_t static_value2 = 0x7c95e4a628f8c6efULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::CartesianState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/CartesianState";
  }

  static const char* value(const ::control_core_msgs::CartesianState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::CartesianState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose position\n"
"geometry_msgs/Twist velocity\n"
"geometry_msgs/Accel acceleration\n"
"geometry_msgs/Wrench wrench\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
;
  }

  static const char* value(const ::control_core_msgs::CartesianState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::CartesianState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.wrench);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::CartesianState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::CartesianState_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_CARTESIANSTATE_H
