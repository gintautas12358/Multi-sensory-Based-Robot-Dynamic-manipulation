#ifndef MATRIX_YR_H_
#define MATRIX_YR_H_

#include <ur_model/ur_model.h>

using namespace ur;

void URModel::matrix_Y(Regressor &Y,
                        const cc::JointPosition &q,
                        const cc::JointVelocity &qP,
                        const cc::JointVelocity &qrP,
                        const cc::JointAcceleration &qrPP) const
{
  cc::Scalar s1 = sin(q(0));
  cc::Scalar s2 = sin(q(1));
  cc::Scalar s3 = sin(q(2));
  cc::Scalar s4 = sin(q(3));
  cc::Scalar s5 = sin(q(4));
  cc::Scalar s6 = sin(q(5));
  cc::Scalar c1 = cos(q(0));
  cc::Scalar c2 = cos(q(1));
  cc::Scalar c3 = cos(q(2));
  cc::Scalar c4 = cos(q(3));
  cc::Scalar c5 = cos(q(4));
  cc::Scalar c6 = cos(q(5));
  cc::Scalar c2c2 = c2 * c2;
  cc::Scalar c2s2 = c2 * s2;
  cc::Scalar c3c3 = c3 * c3;
  cc::Scalar c2c2c3c3 = (c2c2 * c3) * c3;
  cc::Scalar c3s3 = c3 * s3;
  cc::Scalar c2s2c3s3 = (c2s2 * c3) * s3;
  cc::Scalar c4c4 = c4 * c4;
  cc::Scalar c4c4c2c2 = c4c4 * c2c2;
  cc::Scalar c4c4c3c3 = c4c4 * c3c3;
  cc::Scalar c4c4c3c3c2c2 = c4c4c3c3 * c2c2;
  cc::Scalar c4s4 = c4 * s4;
  cc::Scalar c4s4c2s2 = c4s4 * c2s2;
  cc::Scalar c4s4c3s3 = c4s4 * c3s3;
  cc::Scalar c4c4c3s3c2s2 = (c4c4 * c3s3) * c2s2;
  cc::Scalar c3c3c4s4c2s2 = (c3c3 * c4s4) * c2s2;
  cc::Scalar c2c2c4s4c3s3 = (c2c2 * c4s4) * c3s3;
  cc::Scalar c3c2s4 = (c3 * c2) * s4;
  cc::Scalar c2s3c4 = (c2 * s3) * c4;
  cc::Scalar c3s2c4 = (c3 * s2) * c4;
  cc::Scalar s3s2s4 = (s3 * s2) * s4;
  cc::Scalar c5c5 = c5 * c5;
  cc::Scalar c5s5 = c5 * s5;
  cc::Scalar c4s5 = c4 * s5;
  cc::Scalar c5c4 = c5 * c4;
  cc::Scalar s5s4 = s5 * s4;
  cc::Scalar c6c6 = c6 * c6;
  cc::Scalar c6s6 = c6 * s6;
  cc::Scalar c6c6c5s5 = c6c6 * c5s5;
  cc::Scalar c6s6c5 = c6s6 * c5;
  cc::Scalar c6s6c5s5 = c6s6c5 * s5;
  cc::Scalar s6s5 = s6 * s5;
  cc::Scalar c5s5c6 = c5s5 * c6;
  cc::Scalar c5s5s6 = c5s5 * s6;
  cc::Scalar c6s5 = c6 * s5;
  cc::Scalar c6s6s5 = c6s6 * s5;
  cc::Scalar c5s6 = c5 * s6;
  cc::Scalar c6c5 = c6 * c5;
  cc::Scalar a1 = qP(0) * qrP(0);
  cc::Scalar a2 = qP(0) * qrP(1);
  cc::Scalar a3 = qP(0) * qrP(2);
  cc::Scalar a4 = qP(0) * qrP(3);
  cc::Scalar a5 = qP(0) * qrP(4);
  cc::Scalar a7 = qP(1) * qrP(0);
  cc::Scalar a8 = qP(1) * qrP(1);
  cc::Scalar a9 = qP(1) * qrP(2);
  cc::Scalar a10 = qP(1) * qrP(3);
  cc::Scalar a11 = qP(1) * qrP(4);
  cc::Scalar a12 = qP(1) * qrP(5);
  cc::Scalar a13 = qP(2) * qrP(0);
  cc::Scalar a14 = qP(2) * qrP(1);
  cc::Scalar a15 = qP(2) * qrP(2);
  cc::Scalar a16 = qP(2) * qrP(3);
  cc::Scalar a17 = qP(2) * qrP(4);
  cc::Scalar a18 = qP(2) * qrP(5);
  cc::Scalar a19 = qP(3) * qrP(0);
  cc::Scalar a20 = qP(3) * qrP(1);
  cc::Scalar a21 = qP(3) * qrP(2);
  cc::Scalar a22 = qP(3) * qrP(3);
  cc::Scalar a23 = qP(3) * qrP(4);
  cc::Scalar a24 = qP(3) * qrP(5);
  cc::Scalar a25 = qP(4) * qrP(0);
  cc::Scalar a26 = qP(4) * qrP(1);
  cc::Scalar a27 = qP(4) * qrP(2);
  cc::Scalar a28 = qP(4) * qrP(3);
  cc::Scalar a29 = qP(4) * qrP(4);
  cc::Scalar a30 = qP(4) * qrP(5);
  cc::Scalar a32 = qP(5) * qrP(1);
  cc::Scalar a33 = qP(5) * qrP(2);
  cc::Scalar a34 = qP(5) * qrP(3);
  cc::Scalar a35 = qP(5) * qrP(4);
  cc::Scalar a36 = qP(5) * qrP(5);
  cc::Scalar a37 = L2 * L2 * qrPP(0);
  cc::Scalar a38 = L2 * gy;
  cc::Scalar a39 = L2 * gx;
  cc::Scalar a40 = L2 * L2 * a2;
  cc::Scalar a41 = L2 * L2 * a7;
  cc::Scalar a42 = L2 * qrPP(0);
  cc::Scalar a43 = L2 * a2;
  cc::Scalar a44 = L2 * a7;
  cc::Scalar a45 = L2 * a3;
  cc::Scalar a46 = L2 * a13;
  cc::Scalar a47 = L3 * L3 * qrPP(0);
  cc::Scalar a48 = L2 * L3 * qrPP(0);
  cc::Scalar a49 = L3 * gy;
  cc::Scalar a50 = L3 * gx;
  cc::Scalar a59 = L2 * qrPP(1);
  cc::Scalar a60 = L2 * a8;
  cc::Scalar a61 = L3 * qrPP(1);
  cc::Scalar a62 = L3 * qrPP(2);
  cc::Scalar a63 = L3 * a8;
  cc::Scalar a64 = L3 * a9;
  cc::Scalar a65 = L3 * a14;
  cc::Scalar a66 = L3 * a15;
  cc::Scalar a67 = L4 * L4 * qrPP(0);
  cc::Scalar a68 = L4 * gx;
  cc::Scalar a69 = L4 * gy;
  cc::Scalar a70 = L2 * L4 * qrPP(1);
  cc::Scalar a73 = L2 * L4 * a8;
  cc::Scalar a78 = L3 * qrPP(0);
  cc::Scalar a85 = L4 * qrPP(1);
  cc::Scalar a86 = L4 * qrPP(2);
  cc::Scalar a87 = L4 * qrPP(3);
  cc::Scalar a88 = L4 * a8;
  cc::Scalar a89 = L4 * a9;
  cc::Scalar a90 = L4 * a14;
  cc::Scalar a91 = L4 * a10;
  cc::Scalar a92 = L4 * a15;
  cc::Scalar a93 = L4 * a20;
  cc::Scalar a94 = L4 * a16;
  cc::Scalar a95 = L4 * a21;
  cc::Scalar a96 = L4 * a22;
  cc::Scalar a117 = L5 * gy;
  cc::Scalar a120 = L5 * gx;
  cc::Scalar a134 = L4 * qrPP(0);
  cc::Scalar a143 = L2 * qrPP(4);
  cc::Scalar a146 = L2 * a29;
  cc::Scalar a147 = L3 * qrPP(4);
  cc::Scalar a148 = L5 * qrPP(0);
  cc::Scalar a149 = L3 * a29;
  cc::Scalar a150 = L5 * a5;
  cc::Scalar a151 = L5 * a25;
  cc::Scalar a152 = L5 * qrPP(1);
  cc::Scalar a153 = L5 * qrPP(2);
  cc::Scalar a155 = L5 * qrPP(3);
  cc::Scalar a156 = L5 * qrPP(4);
  cc::Scalar a157 = L5 * a8;
  cc::Scalar a158 = L5 * a9;
  cc::Scalar a159 = L5 * a14;
  cc::Scalar a162 = L5 * a10;
  cc::Scalar a163 = L5 * a15;
  cc::Scalar a164 = L5 * a20;
  cc::Scalar a167 = L5 * a16;
  cc::Scalar a168 = L5 * a21;
  cc::Scalar a171 = L5 * a22;
  cc::Scalar a173 = L5 * a29;
  cc::Scalar a174 = L2 * a5;
  cc::Scalar a175 = L2 * a25;
  cc::Scalar a176 = L2 * L2 * qrPP(1);
  cc::Scalar a177 = L2 * gz;
  cc::Scalar a178 = L2 * L2 * a1;
  cc::Scalar a179 = L2 * qrPP(2);
  cc::Scalar a180 = L2 * a1;
  cc::Scalar a181 = L2 * a9;
  cc::Scalar a182 = L2 * a14;
  cc::Scalar a183 = L2 * a15;
  cc::Scalar a184 = L3 * L3 * qrPP(1);
  cc::Scalar a185 = L3 * L3 * qrPP(2);
  cc::Scalar a186 = L2 * a61;
  cc::Scalar a187 = L2 * a62;
  cc::Scalar a188 = L3 * gz;
  cc::Scalar a189 = L3 * L3 * a1;
  cc::Scalar a190 = L2 * L3 * a1;
  cc::Scalar a191 = L2 * a64;
  cc::Scalar a192 = L2 * a65;
  cc::Scalar a193 = L2 * a66;
  cc::Scalar a194 = L2 * a134;
  cc::Scalar a195 = L3 * a134;
  cc::Scalar a196 = L3 * qrPP(3);
  cc::Scalar a197 = L3 * a1;
  cc::Scalar a198 = L3 * a10;
  cc::Scalar a199 = L3 * a20;
  cc::Scalar a200 = L3 * a16;
  cc::Scalar a201 = L3 * a21;
  cc::Scalar a202 = L3 * a22;
  cc::Scalar a204 = L2 * a10;
  cc::Scalar a205 = L2 * a20;
  cc::Scalar a206 = L2 * a16;
  cc::Scalar a207 = L2 * a21;
  cc::Scalar a208 = L2 * a22;
  cc::Scalar a209 = L5 * L5 * qrPP(1);
  cc::Scalar a210 = L5 * L5 * qrPP(2);
  cc::Scalar a211 = L5 * L5 * qrPP(3);
  cc::Scalar a212 = L3 * a152;
  cc::Scalar a213 = L3 * a153;
  cc::Scalar a214 = L3 * a155;
  cc::Scalar a215 = L2 * a152;
  cc::Scalar a218 = L5 * gz;
  cc::Scalar a219 = L5 * L5 * a1;
  cc::Scalar a220 = L3 * L5 * a1;
  cc::Scalar a221 = L3 * a162;
  cc::Scalar a222 = L3 * a164;
  cc::Scalar a223 = L3 * a167;
  cc::Scalar a224 = L3 * a168;
  cc::Scalar a225 = L3 * a171;
  cc::Scalar a226 = L4 * a148;
  cc::Scalar a227 = L2 * L5 * a1;
  cc::Scalar a236 = L5 * a1;
  cc::Scalar a237 = L3 * a11;
  cc::Scalar a238 = L3 * a26;
  cc::Scalar a239 = L3 * a17;
  cc::Scalar a240 = L3 * a27;
  cc::Scalar a241 = L3 * a23;
  cc::Scalar a242 = L3 * a28;
  cc::Scalar a249 = L2 * a63;
  cc::Scalar a250 = L2 * a157;
  cc::Scalar b2 = -1 + 2 * c2c2;
  cc::Scalar b3 = (c2 * c3 - s2 * s3) * c1;
  cc::Scalar b4 = (c2 * c3 - s2 * s3) * s1;
  cc::Scalar b5 = -s3 + 2 * (c3 * c2s2 + c2c2 * s3);
  cc::Scalar b6 = 2 * (c3 * c2c2 - c2s2 * s3);
  cc::Scalar b7 = c3 * c2s2 + c2c2 * s3;
  cc::Scalar b8 = -c2s2 - c3s3 + 2 * (c3 * c3 * c2s2 + c3 * c2c2 * s3);
  cc::Scalar b9 = c2c2 + c3c3 - 1 + 2 * (c2s2c3s3 - c2c2c3c3);
  cc::Scalar b12 = -1 + 2 * (c2c2 + c3c3 + 2 * (c2s2c3s3 - c2c2c3c3));
  cc::Scalar b13 = c2 * c3 - s2 * s3;
  cc::Scalar b14 = c2 * s3 + c3 * s2;
  cc::Scalar b15 = c2c2 + c3c3 + c4c4 - 1 + 2 * (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3 + 2 * (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2));
  cc::Scalar b16 = -c2s2 - c3s3 - c4s4 + 2 * ((c4s4 + c3 * s3) * c2c2 + (c4c4 * c2s2 + c3c3 * c4s4 + c3s3 * c4c4 + c3 * c3 * c2s2) + 2 * ((c4s4c3s3 - c4c4c3c3) * c2s2 - (c2c2c3c3 * c4s4 + c3s3 * c4c4c2c2)));
  cc::Scalar b17 = c2c2 + c3c3 + c4c4 + 2 * (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3 + 2 * (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2));
  cc::Scalar b20 = c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4;
  cc::Scalar b21 = (s3 * s4 - c3 * c4) * c2 + ((c4 * s2) * s3 + s2 * c3 * s4);
  cc::Scalar b22 = (c2 * c3 - s2 * s3) * c1 * s4 + (c2s3c4 + c3s2c4) * c1;
  cc::Scalar b23 = (s3 * s4 - c3 * c4) * c2c2 + (c3c2s4 + c2s3c4) * s2;
  cc::Scalar b24 = 2 * ((c2s2 + c3 * s3) * c4 + (c2c2 + c3c3 - 1) * s4 + 2 * ((-c2s2 * c3 * c3 - c2c2 * s3 * c3) * c4 + (c2s2c3s3 - c2c2c3c3) * s4));
  cc::Scalar b25 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * s1;
  cc::Scalar b26 = 2 * ((c2c2 * s4 + c2 * c4 * s2) * c3 + ((-c2 * s2 * s3) * s4 + s3 * c4 * c2c2));
  cc::Scalar b27 = (c2c2 + c3c3 - 1) * c4 + (-c2s2 - c3s3) * s4 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3) * s4 + ((-c2c2c3c3) * c4 + (c2 * s2) * c3 * c4 * s3));
  cc::Scalar b28 = c3 * c4 - s3 * s4 + 2 * ((s3 * s4 - c3 * c4) * c2c2 + (c3c2s4 + c2s3c4) * s2);
  cc::Scalar b29 = -c4 + 2 * ((c2c2 + c3c3) * c4 + (-c2s2 - c3s3) * s4 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3) * s4 + ((-c2c2c3c3) * c4 + (c2 * s2) * c3 * c4 * s3)));
  cc::Scalar b30 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5s5;
  cc::Scalar b31 = (-c2s2 - c3s3 - c4s4) * c5c5 + 2 * (c2c2 * c5c5 * c3s3 + c4s4 * c2c2 * c5c5 + (c2s2 + c4s4) * c3c3 * c5c5 + c4c4 * c5c5 * c3s3 + (c4c4 * c2s2) * c5c5 + 2 * ((c2s2 * c3s3 * c4s4 - c2c2 * c4c4 * c3s3 - c3c3 * c4c4 * c2s2 - c2c2 * c3c3 * c4s4) * c5c5));
  cc::Scalar b32 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5s5;
  cc::Scalar b34 = (c2c2 + c3c3 + c4c4 - 1) * c5s5 + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c5s5 + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c5s5));
  cc::Scalar b35 = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5 + 0.5 * (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4);
  cc::Scalar b36 = (1 - c3c3 - c4c4 - c2c2) * c5c5 + (c2c2 + c3c3 + c4c4 - 1) + 2 * (c2c2 * c3c3 * c5c5 + c2c2 * c4c4 * c5c5 + c3c3 * c4c4 * c5c5 + (-c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) + 2 * ((c2c2 * c3s3 * c4s4 - c2c2 * c3c3 * c4c4 + c3c3 * c2s2 * c4s4 + c4c4 * c2s2 * c3s3) * c5c5 + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2)));
  cc::Scalar b37 = (c2s2 + c3s3 + c4s4) * c5c5 - (1 * c2s2 + 1 * c3s3 + 1 * c4s4) + 2 * ((-c3s3) * c2c2 * c5c5 - c2c2 * c5c5 * c4s4 + c2c2 * c4s4 + (c3 * s3) * c2c2 + (-c2s2 - c3s3) * c4c4 * c5c5 + (c2s2 + c3s3) * c4c4 + (-c3c3) * c5c5 * c4s4 + (-c3c3 * c2s2) * c5c5 + c3c3 * c4s4 + c3 * c3 * c2s2 + 2 * ((c3c3 * c4c4) * c5c5 * c2s2 - c5c5 * c2s2 * c3s3 * c4s4 + (c2c2 * c4c4) * c5c5 * c3s3 + (c2c2 * c3c3) * c5c5 * c4s4 + (c4s4c3s3 - c4c4c3c3) * c2s2 + (-c4c4c2c2) * c3s3 + (-c2c2c3c3) * c4s4));
  cc::Scalar b38 = 0.5 * (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4);
  cc::Scalar b39 = 2 * ((-c2s2 - c3s3 - c4s4) * c5s5 + 2 * (c2c2 * c3s3 * c5s5 + c4s4 * c2c2 * c5s5 + (c2s2 + c4s4) * c3c3 * c5s5 + c4c4 * c3s3 * c5s5 + (c4c4 * c2s2) * c5s5 + 2 * ((c4s4c3s3 - c4c4c3c3) * c2s2 * c5s5 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5s5)));
  cc::Scalar b40 = 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5s5);
  cc::Scalar b41 = c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4 + 2 * ((s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5);
  cc::Scalar b42 = c2c2 + c3c3 + c4c4 - 1 + 2 * ((1 - c3c3 - c4c4 - c2c2) * c5c5 + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) + 2 * (c2c2 * c3c3 * c5c5 + c2c2 * c4c4 * c5c5 + c3c3 * c4c4 * c5c5 + (-c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) + 2 * ((c2c2 * c3s3 * c4s4 - c2c2 * c3c3 * c4c4 + c3c3 * c2s2 * c4s4 + c4c4 * c2s2 * c3s3) * c5c5)));
  cc::Scalar b46 = (-c2s2 - c3s3 - c4s4) * s5 + 2 * (c2c2 * c4s4 * s5 + (c3 * s3) * c2c2 * s5 + (c2s2 + c3s3) * c4c4 * s5 + c3c3 * c4s4 * s5 + (c3 * c3 * c2s2) * s5 + 2 * ((c4s4c3s3 - c4c4c3c3) * c2s2 * s5 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * s5));
  cc::Scalar b47 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * s5;
  cc::Scalar b48 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5;
  cc::Scalar b49 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * s5;
  cc::Scalar b50 = c5 + 2 * ((-c2c2 - c3c3 - c4c4) * c5 + 2 * ((c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5 + 2 * ((c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5)));
  cc::Scalar b51 = (-c2s2 - c3s3 - c4s4) * c5 + 2 * (c5 * c2c2 * c4s4 + (c3 * s3) * c5 * c2c2 + (c2s2 + c3s3) * c5 * c4c4 + c3c3 * c5 * c4s4 + (c3 * c3 * c2s2) * c5 + 2 * ((c4s4c3s3 - c4c4c3c3) * c5 * c2s2 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5));
  cc::Scalar b52 = 2 * ((-c2s2 - c3s3 - c4s4) * s5 + 2 * (c2c2 * c4s4 * s5 + (c3 * s3) * c2c2 * s5 + (c2s2 + c3s3) * c4c4 * s5 + c3c3 * c4s4 * s5 + (c3 * c3 * c2s2) * s5 + 2 * ((c4s4c3s3 - c4c4c3c3) * c2s2 * s5 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * s5)));
  cc::Scalar b53 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5;
  cc::Scalar b54 = -s5 + 2 * ((c2c2 + c3c3 + c4c4) * s5 + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * s5 + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * s5)));
  cc::Scalar b55 = -s5s4 + 2 * ((c2s2 + c3 * s3) * c4 * s5 + (c2c2 + c3c3) * s4 * s5 + 2 * ((c3c2s4 * s2 * s3 - c4 * c2c2 * s3 * c3 - c2c2c3c3 * s4 - c4 * c2s2 * c3 * c3) * s5));
  cc::Scalar b57 = (c3 * c2c2 * s4 + c4 * c2c2 * s3 - c2 * s2 * s3 * s4 + c2 * c3 * c4 * s2) * s5;
  cc::Scalar b58 = (s3 * s4 - c3 * c4) * c5 * c2c2 + (c3c2s4 + c2s3c4) * c5 * s2;
  cc::Scalar b60 = (c2c2 + c3c3) * c4 * c5 + (-c2s2 - c3s3) * c5 * s4 - c5c4 + 2 * ((c3 * c2s3c4 * s2 - c4 * c2c2c3c3 + c3 * c3 * c2s2 * s4 + c3 * c2c2 * s3 * s4) * c5);
  cc::Scalar b62 = (c2 * c3 - s2 * s3) * s5;
  cc::Scalar b64 = (c2s2 + c3 * s3) * c4 * s5 + (c2c2 + c3c3) * s4 * s5 - s5s4 + 2 * ((c3c2s4 * s2 * s3 - c4 * c2c2 * s3 * c3 - c2c2c3c3 * s4 - c4 * c2s2 * c3 * c3) * s5);
  cc::Scalar b66 = (c2 * s3 + c3 * s2) * c5;
  cc::Scalar b67 = c4s5 * s3 + c3 * s5s4 + 2 * ((c2 * s2 * s3 * s4 - c4 * c2c2 * s3 - c3 * c2c2 * s4 - c2 * c3 * c4 * s2) * s5);
  cc::Scalar b70 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c6s6 * s5;
  cc::Scalar b72 = (c2c2 + c3c3 + c4c4) * c6c6 * c5s5 + (-c2s2 - c3s3 - c4s4) * c6s6 * s5 - c6c6c5s5 + 2 * ((c2s2 * c3s3 - c2c2 * c4c4 - c3c3 * c4c4 - c2c2 * c3c3 + c2s2 * c4s4 + c3s3 * c4s4) * c6c6 * c5s5 + (c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c6s6 * s5 + 2 * ((-c3c3 * c4s4 * c5s5 - c4c4 * c3s3 * c5s5) * c6c6 * c2s2 + (c2c2 * c3c3 * c4c4 * c5s5 - c2c2 * c3s3 * c4s4 * c5s5) * c6c6 + (c4s4c3s3 - c4c4c3c3) * c2s2 * c6s6 * s5 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c6s6 * s5));
  cc::Scalar b73 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c6s6 * s5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6c6 * s5 + 0.5 * ((c2 * c3 * c4 - c2 * s3 * s4 - c3 * s2 * s4 - c4 * s2 * s3) * s5);
  cc::Scalar b74 = c5 * c5 * c2c2 * c6s6 + (c3c3 + c4c4) * c5 * c5 * c6s6 + (-c2s2 - c3s3 - c4s4) * c5 + c2c2 * c6s6 + (c3c3 + c4c4 - c5c5) * c6s6 + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c5 * c5 * c6s6 + (c2c2 + c3c3 + c6c6) * c5 * c4s4 + (c2s2 * c3 * c3 + c2c2 * s3 * c3 + c4c4 * c2s2 + c4c4 * c3s3 + c6c6 * c2s2 + c6c6 * c3s3) * c5 + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c6s6 + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c5 * c5 * c6s6 + (-c3c3 - c4c4) * c5 * c6c6 * c2s2 + (-c2c2 * c3s3 - c2c2 * c4s4 - c3c3 * c4s4 - c4c4 * c3s3) * c5 * c6c6 + (c4s4c3s3 - c4c4c3c3) * c5 * c2s2 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5 + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c6s6 + 2 * ((c2c2 * c3c3 * c6c6 * c4s4 + c2c2 * c4c4 * c6c6 * c3s3 + c3c3 * c4c4 * c6c6 * c2s2 - c6c6 * c2s2 * c3s3 * c4s4) * c5)));
  cc::Scalar b75 = (-c5 * c5 - 1) * c6c6 * c2s2 + (-c5 * c5 - 1) * c6c6 * c3s3 + (-c5 * c5 - 1) * c6c6 * c4s4 + c2s2 + c3s3 + c4s4 + c6s6c5 + 2 * ((c3s3 + c4s4 + c5 * c5 * c3s3 + c5 * c5 * c4s4) * c2c2 * c6c6 + (-c4s4 - c5 * c6s6 - c3 * s3) * c2c2 + (c5 * c5 + 1) * c4c4 * c6c6 * c2s2 + (c3s3 * c5 * c5 + c3s3) * c4c4 * c6c6 - c4c4 * c2s2 + (-c3s3 - c5 * c6s6) * c4c4 + (c3c3 * c5 * c5 + c3c3) * c6c6 * c2s2 + (c3c3 * c4s4 * c5 * c5 + c3c3 * c4s4) * c6c6 + (-c3 * c3) * c2s2 - (c3c3 * c4s4 + c5 * c3c3 * c6s6) + 2 * ((c3s3 * c4s4 - c3c3 * c4c4) * c5 * c5 * c6c6 * c2s2 + (-c2c2 * c3c3 * c4s4 - c2c2 * c4c4 * c3s3) * c5 * c5 * c6c6 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5 * c6s6 + (c3s3 * c4s4 - c3c3 * c4c4) * c6c6 * c2s2 + (-c2c2 * c3c3 * c4s4 - c2c2 * c4c4 * c3s3) * c6c6 + (c4c4c3c3 - c4s4c3s3) * c2s2 + (c2c2c3c3 * c4s4 + c3s3 * c4c4c2c2) + 2 * ((c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5 * c6s6)));
  cc::Scalar b76 = (1 - c6c6) * c2 * c3 * c4 + (c6c6 * s3 * s4 - s3 * s4) * c2 + (c6c6 * s2 * s4 - s2 * s4) * c3 + (c6c6 * s2 * s3 - s2 * s3) * c4 + (c3c2s4 * c6s6 + c6s6 * c2s3c4 + c6s6 * c3s2c4 - c6s6 * s3s2s4) * c5;
  cc::Scalar b78 = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c6c6 * c5s5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6s6 * s5;
  cc::Scalar b79 = (s3 * s4 - c3 * c4) * c2 * c6s6 + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5 * c6c6 + (c3 * s2 * s4 + c4 * s2 * s3) * c6s6 + 0.5 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5);
  cc::Scalar b81 = (s3 * s4 - c3 * c4) * c2 * c6c6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c6s6 + (c3 * s2 * s4 + c4 * s2 * s3) * c6c6;
  cc::Scalar b83 = (c2c2 + c3c3 + c4c4) * c6c6 * c5s5 + (1 - c3c3 - c4c4 - c2c2) * c5s5 + (-c2s2 - c3s3 - c4s4) * c6s6 * s5 - c6c6c5s5 + 2 * ((c2s2 * c3s3 - c2c2 * c4c4 - c3c3 * c4c4 - c2c2 * c3c3 + c2s2 * c4s4 + c3s3 * c4s4) * c6c6 * c5s5 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5s5 + (c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c6s6 * s5 + 2 * ((-c3c3 * c6c6 * c4s4 - c4c4 * c6c6 * c3s3) * c2s2 * c5s5 + (c4s4c3s3 - c4c4c3c3) * c2s2 * c6s6 * s5 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2 + c2c2 * c3c3 * c4c4 * c6c6 - c2c2 * c6c6 * c3s3 * c4s4) * c5s5 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c6s6 * s5));
  cc::Scalar b84 = c5c5 * c2s2 + c5c5 * c3s3 + c4s4 * c5c5 + (-c5 * c5 - 1) * c6c6 * c2s2 + (-c5 * c5 - 1) * c6c6 * c3s3 + (-c4s4 * c5 * c5 - c4s4) * c6c6 + c6s6c5 + 2 * ((c3s3 + c4s4 + c5 * c5 * c3s3 + c5 * c5 * c4s4) * c2c2 * c6c6 + (-c5 * c6s6 - c5c5 * c3s3 - c5c5 * c4s4) * c2c2 + (c2s2 + c4s4 + c5 * c5 * c2s2 + c5 * c5 * c4s4) * c3c3 * c6c6 + (-c5 * c6s6 - c5c5 * c2s2 - c5c5 * c4s4) * c3c3 + (c2s2 + c3s3 + c5 * c5 * c2s2 + c5 * c5 * c3s3) * c4c4 * c6c6 + (-c5 * c6s6 - c5c5 * c2s2 - c5c5 * c3s3) * c4c4 + 2 * ((-c3c3 * c4s4 - c4c4 * c3s3) * c5 * c5 * c2c2 * c6c6 + (c2s2 * c3s3 * c4s4 - c3c3 * c4c4 * c2s2) * c5 * c5 * c6c6 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5 * c6s6 + (-c3c3 * c4s4 - c4c4 * c3s3) * c2c2 * c6c6 + (c3c3 * c5c5 * c4s4 + c4c4 * c5c5 * c3s3) * c2c2 + (c2s2 * c3s3 * c4s4 - c3c3 * c4c4 * c2s2) * c6c6 + (c3c3 * c4c4 * c5c5 * c2s2 - c5c5 * c2s2 * c3s3 * c4s4) + 2 * ((c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5 * c6s6)));
  cc::Scalar b87 = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c6c6 * c5s5 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5s5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6s6 * s5;
  cc::Scalar b88 = 0.5 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5);
  cc::Scalar b89 = 0.5 * ((c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * s5);
  cc::Scalar b90 = (c3 * c4 - s3 * s4) * c2 + ((-s2 * s4) * c3 + (-s2) * c4 * s3) + 2 * ((s3 * s4 - c3 * c4) * c2 * c6c6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c6s6 + (c3 * s2 * s4 + c4 * s2 * s3) * c6c6);
  cc::Scalar b91 = (c2 * c3 * c4 - c2 * s3 * s4 - c3 * s2 * s4 - c4 * s2 * s3) * s5 + 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c6s6 * s5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6c6 * s5);
  cc::Scalar b94 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5s5 + 2 * ((s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c6c6 * c5s5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6s6 * s5);
  cc::Scalar b96 = (1 - c3c3 - c4c4 - c2c2) * c5c5 - (1 * c2c2 + 1 * c3c3 + 1 * c4c4) + 2 * (c2c2 * c3c3 * c5c5 + c2c2 * c5c5 * c6c6 + c4c4 * c2c2 * c5c5 + c2c2 * c6c6 + c3c3 * c5c5 * c6c6 + c4c4 * c3c3 * c5c5 + c3c3 * c6c6 + (c4c4 - 1) * c5c5 * c6c6 + (-c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 + c4c4 * c6c6 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) + 2 * ((c5 * c5 + 1) * c6c6 * c2s2 * c3s3 + (c5 * c5 + 1) * c6c6 * c2s2 * c4s4 + (c5 * c5 + 1) * c6c6 * c3s3 * c4s4 + (-c2c2 * c3c3 - c2c2 * c4c4 - c3c3 * c4c4 - c2c2 * c3c3 * c5c5 - c2c2 * c4c4 * c5c5 - c3c3 * c4c4 * c5c5) * c6c6 + (c4c4 * c5c5) * c2s2 * c3s3 + (c3c3 * c5c5) * c2s2 * c4s4 + (-c6s6c5) * c2s2 + (c2c2 * c5c5) * c3s3 * c4s4 + (-c6s6c5) * c3s3 + (-c6s6c5) * c4s4 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2 - c2c2 * c3c3 * c4c4 * c5c5) + 2 * ((-c4s4) * c5 * c5 * c2c2 * c6c6 * c3s3 + (-c4c4 * c2s2) * c5 * c5 * c6c6 * c3s3 + (-c3c3 * c2s2 * c4s4) * c5 * c5 * c6c6 + c6s6 * c5 * c2c2 * c3s3 + (c4s4 * c6s6) * c5 * c2c2 + (c4c4 * c6s6) * c5 * c3s3 + (c3c3 * c2s2 * c6s6 + c4c4 * c2s2 * c6s6 + c3c3 * c4s4 * c6s6) * c5 + (-c4s4) * c2c2 * c6c6 * c3s3 + (c3c3 * c4c4 + c3c3 * c4c4 * c5c5) * c2c2 * c6c6 + (-c4c4 * c2s2) * c6c6 * c3s3 + (-c3c3 * c2s2 * c4s4) * c6c6 + 2 * ((c4s4c3s3 - c4c4c3c3) * c5 * c2s2 * c6s6 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5 * c6s6))));
  cc::Scalar b97 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 + 2 * ((s3 * s4 - c3 * c4) * c2 * c6s6 + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5 * c6c6 + (c3 * s2 * s4 + c4 * s2 * s3) * c6s6);
  cc::Scalar b98 = (c2s2 + c3s3 + c4s4) * s5 + 2 * ((-c5 * c6s6 - c3 * s3) * c2c2 * s5 - c2c2 * c4s4 * s5 + (-c2s2 - c3s3 - c5 * c6s6) * c4c4 * s5 + (-c3c3 - c6c6) * c4s4 * s5 + (-c2s2 * c3 * c3 - c6c6 * c2s2 - c6c6 * c3s3 - c5 * c3c3 * c6s6) * s5 + c6s6c5s5 + 2 * ((c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5 * c6s6 * s5 + (c2c2 * c3s3 + c3c3 * c2s2 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c6c6 * s5 + (c2c2c3c3 * c4s4 + c2s2 * c4c4c3c3 + c3s3 * c4c4c2c2 - c2s2 * c4s4c3s3) * s5 + 2 * ((c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5 * c6s6 * s5 + (c2s2 * c3s3 * c4s4 - c2c2 * c4c4 * c3s3 - c3c3 * c4c4 * c2s2 - c2c2 * c3c3 * c4s4) * c6c6 * s5)));
  cc::Scalar b100 = c5 + 2 * ((-c3s3 - c4s4) * c5 * c6s6c5 - c5 * c2s2 * c6s6c5 + (-c2c2 - c3c3 - c4c4 - c6c6) * c5 - c2s2 * c6s6 + (-c3s3 - c4s4) * c6s6 + 2 * ((c3s3 + c4s4) * c5 * c5 * c2c2 * c6s6 + (c3c3 * c2s2 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c5 * c5 * c6s6 + c6c6 * c5 * c2c2 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3 + c3c3 * c6c6 + c4c4 * c6c6) * c5 + (c3s3 + c4s4) * c2c2 * c6s6 + (c3c3 * c2s2 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c6s6 + 2 * ((c4s4c3s3 - c4c4c3c3) * c5 * c5 * c2s2 * c6s6 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5 * c5 * c6s6 + (c3s3 + c4s4) * c5 * c6c6 * c2s2 + (c3s3 * c4s4 - c2c2 * c4c4 - c3c3 * c4c4 - c2c2 * c3c3) * c5 * c6c6 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5 + (c4s4c3s3 - c4c4c3c3) * c2s2 * c6s6 + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c6s6 + 2 * ((c2c2 * c3c3 * c4c4 * c6c6 - c2c2 * c6c6 * c3s3 * c4s4 - c3c3 * c6c6 * c2s2 * c4s4 - c4c4 * c6c6 * c2s2 * c3s3) * c5))));
  cc::Scalar b102 = (s3 * s4 - c3 * c4) * c2 * c6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * s6 + (c3 * s2 * s4 + c4 * s2 * s3) * c6;
  cc::Scalar b105 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * s5 * s6;
  cc::Scalar b107 = (s3 * s4 - c3 * c4) * c2 * c5 * s6 + (c3 * s2 * s4 + c4 * s2 * s3) * c5 * s6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c6 + 2 * ((s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c6 * c5c5);
  cc::Scalar b108 = (-c2s2 - c3s3 - c4s4) * c5 * s6 + (1 - c3c3 - c4c4 - c2c2) * c6 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c5 * s6 + (c2c2 + c3c3 + c4c4 - 1) * c6 * c5c5 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c6 + 2 * ((c4s4c3s3 * s6 - c4c4c3c3 * s6) * c5 * c2s2 + (-c2c2c3c3 * c4s4 * s6 - c3s3 * c4c4c2c2 * s6) * c5 + (c3s3 + c4s4) * c6 * c5c5 * c2s2 + (c3s3 * c4s4 - c2c2 * c4c4 - c3c3 * c4c4 - c2c2 * c3c3) * c6 * c5c5 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c6 + 2 * ((c2c2 * c3c3 * c4c4 * c5c5 - c2c2 * c5c5 * c3s3 * c4s4 - c3c3 * c5c5 * c2s2 * c4s4 - c4c4 * c5c5 * c2s2 * c3s3) * c6)));
  cc::Scalar b109 = (-c2s2 - c3s3 - c4s4) * c6 * s5 + (-c2c2 - c3c3 - c4c4) * c5s5 * s6 + c5s5s6 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c6 * s5 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5s5 * s6 + 2 * ((c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * c6 * s5 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5s5 * s6));
  cc::Scalar b110 = s6s5 + 2 * ((-c2s2 - c3s3 - c4s4) * c5 * c6 * s5 + (-c2c2 - c3c3 - c4c4) * s5 * s6 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c5 * c6 * s5 + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * s5 * s6 + 2 * ((c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * c5 * c6 * s5 + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * s5 * s6)));
  cc::Scalar b111 = (c3 * c4 - s3 * s4) * c2 * s6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c6 + (-c3 * s2 * s4 - c4 * s2 * s3) * s6;
  cc::Scalar b114 = -c6s5 + 2 * ((-c2s2 - c3s3 - c4s4) * c5 * s5 * s6 + (c2c2 + c3c3 + c4c4) * c6 * s5 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c5 * s5 * s6 + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c6 * s5 + 2 * ((c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * c5 * s5 * s6 + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c6 * s5)));
  cc::Scalar b116 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c6 * s5;
  cc::Scalar b119 = (-c2s2 - c3s3 - c4s4) * c5 * c6 + (c2c2 + c3c3 + c4c4 - 1) * s6 + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * c5 * c6 + (1 - c3c3 - c4c4 - c2c2) * c5c5 * s6 + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * s6 + 2 * ((c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * c5 * c6 + (c2c2 * c3c3 + c2c2 * c4c4 + c3c3 * c4c4 - c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 * s6 + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * s6 + 2 * ((c2c2 * c3s3 * c4s4 * s6 - c2c2 * c3c3 * c4c4 * s6 + c3c3 * c2s2 * c4s4 * s6 + c4c4 * c2s2 * c3s3 * s6) * c5c5)));
  cc::Scalar b121 = (c2c2 + c3c3 + c4c4) * c6 * c5s5 + (-c2s2 - c3s3 - c4s4) * s5 * s6 - c5s5c6 + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c6 * c5s5 + (c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3) * s5 * s6 + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c6 * c5s5 + (c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * s5 * s6));
  cc::Scalar b122 = (s3 * s4 - c3 * c4) * c2 * c5 * c6 + (c3 * s2 * s4 + c4 * s2 * s3) * c5 * c6 + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * s6 + 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5c5 * s6);
  cc::Scalar b123 = (c2 * s3 + c3 * s2) * c1;
  cc::Scalar b124 = (c2 * s3 + c3 * s2) * s1;
  cc::Scalar b125 = -1 + 2 * (c2c2c3c3 * s4 * s4 + c4c4c2c2 * s3 * s3 + c4c4c3c3 * s2 * s2 + s3s2s4 * s3s2s4 + 2 * (c2c2c4s4c3s3 + c3c3c4s4c2s2 + c4c4c3s3c2s2 - c2s2c3s3 * s4 * s4 - c4s4c2s2 * s3 * s3 - c4s4c3s3 * s2 * s2));
  cc::Scalar b126 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c1;
  cc::Scalar b127 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * s1;
  cc::Scalar b128 = c3 * c4 - s3 * s4;
  cc::Scalar b129 = 2 * (c3 * s4 + c4 * s3);
  cc::Scalar b130 = c3 * s4 + c4 * s3;
  cc::Scalar b131 = c5c5 - 1;
  cc::Scalar b132 = -1 + 2 * c5c5;
  cc::Scalar b133 = (c2 * c3 - s2 * s3) * c1 * s4 * s5 + (c2s3c4 + c3s2c4) * c1 * s5;
  cc::Scalar b134 = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * s1 * s5;
  cc::Scalar b135 = c3 * c5c4 - c5 * s3 * s4;
  cc::Scalar b136 = c3 * c4 * s5 - s3 * s5s4;
  cc::Scalar b138 = c5c4 * s3 + c3 * c5 * s4;
  cc::Scalar b139 = (c2 * s3 + c3 * s2) * s5;
  cc::Scalar b140 = c4s5 * s3 + c3 * s5s4;
  cc::Scalar b141 = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4);
  cc::Scalar b142 = (1 - c5c5) * c6s6;
  cc::Scalar b143 = (1 - c5c5) * c6c6;
  cc::Scalar b144 = c6c6 * s5 - 0.5 * s5;
  cc::Scalar b145 = (c2 * s3 * s4 * s6 + c3 * s2 * s4 * s6 + c4 * s2 * s3 * s6 - c2 * c3 * c4 * s6) * c5 * c6 + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5 * c6c6 + 0.5 * (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4);
  cc::Scalar b146 = c5s5 - c6c6c5s5;
  cc::Scalar b147 = (c2 * c3 * c4 * s6 - c3 * s2 * s4 * s6 - c4 * s2 * s3 * s6 - c2 * s3 * s4 * s6) * c5 * c6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5c5 * c6c6 + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5 + 0.5 * (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4);
  cc::Scalar b148 = (1 - c6c6) * c5c5 + (c6c6 - 1);
  cc::Scalar b149 = c5c5 - 1 + 2 * ((1 - c5c5) * c6c6);
  cc::Scalar b150 = (c2 * c3 * c4 - c2 * s3 * s4 - c3 * s2 * s4 - c4 * s2 * s3) * c5 + 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * c5 * c6s6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5 * c6c6);
  cc::Scalar b151 = c5 - 2 * c5 * c6c6;
  cc::Scalar b152 = 2 * ((1 - c5c5) * c6s6);
  cc::Scalar b153 = -s5 + 2 * c6c6 * s5;
  cc::Scalar b154 = (c2 * s3 * s4 * s6 + c3 * s2 * s4 * s6 + c4 * s2 * s3 * s6 - c2 * c3 * c4 * s6) * s5 + 2 * ((s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5 * c6 * s5);
  cc::Scalar b155 = c6 - 2 * c6 * c5c5;
  cc::Scalar b156 = (s3s2s4 - c3s2c4) * c5c5 * s6 - c5c5 * c2s3c4 * s6 - c5c5 * c3c2s4 * s6 + c3c2s4 * s6 + c2s3c4 * s6 + (c3s2c4 - s3s2s4) * s6;
  cc::Scalar b157 = (c2 * s3 * s4 * s5 + c3 * s2 * s4 * s5 + c4 * s2 * s3 * s5 - c2 * c3 * c4 * s5) * c6 + 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5 * s5 * s6);
  cc::Scalar b158 = -s6 + 2 * c5c5 * s6;
  cc::Scalar b159 = (s3s2s4 - c3s2c4) * c6 * c5c5 - c6 * c5c5 * c2s3c4 - c6 * c5c5 * c3c2s4 + c6 * c3c2s4 + c6 * c2s3c4 + (c3s2c4 - s3s2s4) * c6;
  cc::Scalar b163 = -1 + 2 * c6c6;
  cc::Scalar d2 = a43 + a44;
  cc::Scalar d4 = a2 + a3 + a7 + a13;
  cc::Scalar d5 = qrPP(1) + qrPP(2);
  cc::Scalar d6 = a8 + a9 + a14 + a15;
  cc::Scalar d7 = (a2 + a3 + a7 + a13) * L3 * L3;
  cc::Scalar d8 = (a2 + a7) * L2 * L3;
  cc::Scalar d9 = (a3 + a13) * L2 * L3;
  cc::Scalar d11 = a61 + a62;
  cc::Scalar d12 = a2 + a3 + a4 + a7 + a13 + a19;
  cc::Scalar d13 = qrPP(1) + qrPP(2) + qrPP(3);
  cc::Scalar d14 = a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22;
  cc::Scalar d15 = (a8 + a9 + a14 + a15) * L3 * L4;
  cc::Scalar d16 = (qrPP(1) + qrPP(2)) * L3 * L4;
  cc::Scalar d19 = (a4 + a19) * L2 + (a45 + a46);
  cc::Scalar d20 = (a2 + a3 + a7 + a13) * L3;
  cc::Scalar d21 = (a4 + a19) * L3;
  cc::Scalar d22 = a11 + a17 + a23 + a26 + a27 + a28;
  cc::Scalar d23 = a5 + a25;
  cc::Scalar d24 = a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22 - a29;
  cc::Scalar d34 = (a2 + a3 + a4 + a7 + a13 + a19) * L5;
  cc::Scalar d37 = (a5 + a25) * L3;
  cc::Scalar d41 = a12 + a18 + a24 + a32 + a33 + a34;
  cc::Scalar d42 = qP(0) * qrP(5) + qP(5) * qrP(0);
  cc::Scalar d43 = a30 + a35;
  cc::Scalar d45 = a179 + L2 * qrPP(3);
  cc::Scalar d48 = a150 + a151 + gz;

  Y(0, 0) = qrPP(0);
  Y(0, 1) = (c1 * gy - gx * s1) * c2;
  Y(0, 2) = (-a2 - a7) * c2s2 + c2c2 * qrPP(0);
  Y(0, 3) = (a2 + a7) * c2s2 + (1 - c2c2) * qrPP(0);
  Y(0, 4) = (-a2 - a7) * c2s2 + c2c2 * qrPP(0);
  Y(0, 6) = (a2 + a7) * b2 + 2 * c2s2 * qrPP(0);
  Y(0, 7) = a8 * c2 + qrPP(1) * s2;
  Y(0, 8) = c2 * qrPP(1) - a8 * s2;
  Y(0, 9) = (a38 * c1 - a39 * s1) * c2 + (-a40 - a41) * c2s2 + a37 * c2c2;
  Y(0, 10) = (-a45 - a46) * b7 + (a42 * b6 - b5 * d2 - b4 * gx + b3 * gy);
  Y(0, 11) = -b8 * d4 - b9 * qrPP(0);
  Y(0, 12) = (c2c2 + c3c3) * qrPP(0) + b8 * d4 + 2 * ((c2s2c3s3 - c2c2c3c3) * qrPP(0));
  Y(0, 13) = -b8 * d4 - b9 * qrPP(0);
  Y(0, 15) = -b12 * d4 + 2 * ((-c2s2 - c3s3) * qrPP(0) + 2 * ((c2s2 * c3 * c3 + c2c2 * s3 * c3) * qrPP(0)));
  Y(0, 16) = b13 * d6 + b14 * d5;
  Y(0, 17) = b13 * d5 - b14 * d6;
  Y(0, 18) = (a38 * c1 - a39 * s1) * c2 + (-a40 - a41) * c2s2 + (a49 * b3 + a48 * b6 - a50 * b4 - a47 * b9 + a37 * c2c2 - b5 * d8 - b8 * d7 - b7 * d9);
  Y(0, 19) = (-a63 - a64 - a65 - a66) * b13 + (c1 * gx - b14 * d11 - a60 * c2 - a59 * s2 + gy * s1);
  Y(0, 20) = qrPP(0);
  Y(0, 21) = -b16 * d12 - b15 * qrPP(0);
  Y(0, 22) = b16 * d12 + b17 * qrPP(0);
  Y(0, 24) = -d12 + 2 * ((c2c2 + c3c3 + c4c4) * d12 + (c2s2 + c3s3 + c4s4) * qrPP(0) + 2 * ((-c3 * s3) * c2c2 * qrPP(0) - c2c2 * c4s4 * qrPP(0) + (-c3c3) * c4s4 * qrPP(0) + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * d12 + (-c2s2 * c3 * c3 - c4c4 * c2s2 - c4c4 * c3s3) * qrPP(0) + 2 * ((c4c4c3c3 - c4s4c3s3) * c2s2 * qrPP(0) + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * d12 + (c2c2c3c3 * c4s4 + c3s3 * c4c4c2c2) * qrPP(0))));
  Y(0, 25) = b20 * d13 - b21 * d14;
  Y(0, 26) = -b20 * d14 - b21 * d13;
  Y(0, 27) = a38 * c1 * c2 + a68 * c1 + (-a39) * c2 * s1 + (-a73) * c2 + (-a40 - a41) * c2s2 + a69 * s1 + (a67 + a49 * b3 + a48 * b6 - a50 * b4 - a47 * b9 + a37 * c2c2 - b5 * d8 - b8 * d7 - b7 * d9 - b13 * d15 - b14 * d16 - a70 * s2);
  Y(0, 28) = (-a88 - a89 - a90 - a91 - a92 - a93 - a94 - a95 - a96) * b20 + (-a85 - a86 - a87) * b21 + (a42 * b26 - a78 * b24 - b28 * d2 - b23 * d19 - b27 * d21 - b29 * d20 - b25 * gx + b22 * gy);
  Y(0, 29) = -b16 * d12 - b15 * qrPP(0);
  Y(0, 30) = (1 - c3c3 - c4c4 - c2c2) * c5c5 * qrPP(0) + (b30 * d13 - b31 * d12 - b32 * d14 + b34 * d23 - b35 * d22) + 2 * (c2c2 * c3c3 * c5c5 * qrPP(0) + c4c4 * c2c2 * c5c5 * qrPP(0) + c4c4 * c3c3 * c5c5 * qrPP(0) + (-c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 * qrPP(0) + 2 * ((c2c2 * c3s3 * c4s4 * qrPP(0) - c2c2 * c3c3 * c4c4 * qrPP(0) + c3c3 * c2s2 * c4s4 * qrPP(0) + c4c4 * c2s2 * c3s3 * qrPP(0)) * c5c5));
  Y(0, 31) = b32 * d14 - b30 * d13 - b37 * d12 - b34 * d23 + b35 * d22 - b36 * qrPP(0);
  Y(0, 32) = b16 * d12 + b38 * d22 + b17 * qrPP(0) + b21 * qrPP(4);
  Y(0, 33) = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * d14 + (b39 * d12 - b41 * d13 - b40 * d22 - b42 * d23) + 2 * ((c2 * c3 * c4 - c2 * s3 * s4 - c3 * s2 * s4 - c4 * s2 * s3) * c5c5 * d14 + (c2c2 + c3c3 + c4c4 - 1) * c5s5 * qrPP(0) + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c5s5 * qrPP(0) + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c5s5 * qrPP(0))));
  Y(0, 34) = b49 * d13 + b50 * d12 - b46 * d23 + b47 * d24 + b48 * qrPP(4) + 2 * ((-c2s2 - c3s3 - c4s4) * c5 * qrPP(0) + 2 * ((c4s4 + c3 * s3) * c5 * c2c2 * qrPP(0) + (c3 * c3 + c4c4) * c5 * c2s2 * qrPP(0) + (c3c3 * c4s4 + c4c4 * c3s3) * c5 * qrPP(0) + 2 * ((c4s4c3s3 - c4c4c3c3) * c5 * c2s2 * qrPP(0) + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5 * qrPP(0))));
  Y(0, 35) = b53 * d13 + b54 * d12 + b48 * d24 - b51 * d23 - b47 * qrPP(4) - b52 * qrPP(0);
  Y(0, 36) = (-a8 - a9 - a10 - a14 - a15 - a16 - a20 - a21 - a22) * L4 * L5 * b20 + (-b21 * qrPP(1) - b21 * qrPP(2) - b21 * qrPP(3)) * L4 * L5 + (-a2 * b16 - a3 * b16 - a4 * b16 - a7 * b16 - a13 * b16 - a19 * b16 - b15 * qrPP(0)) * L5 * L5 + (L2 * b26 * qrPP(0) - L2 * a4 * b23 - L2 * a2 * b28 - L3 * a2 * b29 - L3 * a4 * b27 - L3 * a3 * b29 - L2 * a7 * b28 - L2 * a13 * b23 - L3 * a7 * b29 - L2 * a19 * b23 - L3 * a13 * b29 - L3 * a19 * b27 - L3 * b24 * qrPP(0) - L2 * a3 * b23) * L5 + (a67 + a49 * b3 + a48 * b6 - a50 * b4 - a47 * b9 + a117 * b22 - a120 * b25 + a68 * c1 - a73 * c2 + a37 * c2c2 - a40 * c2s2 - a41 * c2s2 - b5 * d8 - b8 * d7 - b7 * d9 - b13 * d15 - b14 * d16 + a69 * s1 - a70 * s2 + a38 * c1 * c2 - a39 * c2 * s1);
  Y(0, 37) = (a173 - a158 - a159 - a162 - a163 - a164 - a167 - a168 - a171 - a157 + L4 * a11 + L4 * a17 + L4 * a23 + L4 * a26 + L4 * a27 + L4 * a28) * b48 + (a146 - a60 - a63 * c3 - a64 * c3 - a65 * c3 - a66 * c3 + a149 * c3) * c2 * c5 + (a143 + c1 * gy * s3 * s4 - gx * s1 * s3 * s4 - c1 * c3 * c4 * gy + c3 * c4 * gx * s1) * c2 * s5 + (c1 * gx - a59 * s2 + gy * s1 + a63 * s2 * s3 + a64 * s2 * s3 + a65 * s2 * s3 + a66 * s2 * s3 - a149 * s2 * s3) * c5 + (c1 * c3 * gy * s2 * s4 - L4 * a25 - L4 * a5 + c1 * c4 * gy * s2 * s3 - c3 * gx * s1 * s2 * s4 - c4 * gx * s1 * s2 * s3) * s5 + (a85 * b47 + a86 * b47 + a87 * b47 - a88 * b49 - a89 * b49 - a90 * b49 - a91 * b49 - a92 * b49 - a93 * b49 - a94 * b49 - a95 * b49 - a96 * b49 + a148 * b52 + a150 * b51 + a151 * b51 + a156 * b47 - a152 * b53 - a153 * b53 - a155 * b53 + a147 * b62 + a174 * b58 + a175 * b58 - b67 * d2 - b55 * d20 + b57 * d19 - b66 * d11 - b64 * d21 - b54 * d34 + b60 * d37 - L4 * a29 * b49 + L4 * b53 * qrPP(4)) + 2 * ((-c3 * c2c2) * a42 * c4 * s5 + (c3c2s4 * s2 + c2s3c4 * s2 + c2c2 * s3 * s4) * a42 * s5 + (c2c2 + c3c3) * a78 * c4 * s5 + (-c2s2 * s4) * a78 * s5 + (-c4s5 - c3 * s3 * s5s4) * a78 + a134 * c5 + 2 * ((c2 * c3 * s2 * s3 - c2c2c3c3) * a78 * c4 * s5 + (c2s2 * c3 * c3 + c2c2 * s3 * c3) * a78 * s4 * s5));
  Y(0, 38) = c2c2 * qrPP(0) - c2c2 * c5c5 * qrPP(0) + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5c5 * d22 + (1 - c4c4 - c3c3) * c5c5 * qrPP(0) + (c3c3 + c4c4) * qrPP(0) + (b30 * d13 - b32 * d14 + b37 * d12 + b34 * d23 + b21 * qrPP(4)) + 2 * (c2c2 * c3c3 * c5c5 * qrPP(0) + c4c4 * c2c2 * c5c5 * qrPP(0) + c4c4 * c3c3 * c5c5 * qrPP(0) + (-c2s2 * c3s3 - c2s2 * c4s4 - c3s3 * c4s4) * c5c5 * qrPP(0) + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * qrPP(0) + 2 * ((-c4c4) * c2c2 * c3c3 * c5c5 * qrPP(0) + (c3s3 * c4s4) * c2c2 * c5c5 * qrPP(0) + (c2s2 * c4s4) * c3c3 * c5c5 * qrPP(0) + (c4c4 * c2s2 * c3s3) * c5c5 * qrPP(0) + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * qrPP(0)));
  Y(0, 39) = (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5c5 * c6c6 * d22 + (1 - c3c3 - c4c4 - c2c2) * c5c5 * c6c6 * qrPP(0) + (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c6c6 * d22 + (-c2c2 - c3c3 - c4c4) * c6c6 * qrPP(0) + (c2 * c3 * c4 * c5 * d14 * s5 - c2 * c5 * d14 * s3 * s4 * s5 - c3 * c5 * d14 * s2 * s4 * s5 - c4 * c5 * d14 * s2 * s3 * s5) * c6c6 + (c2c2 + c3c3 + c4c4) * qrPP(0) + (a29 * b70 - b75 * d12 - b78 * d13 + b72 * d23 - b73 * d41 + b74 * d42 + b79 * d43 - b76 * qrPP(4) + c6s6 * d14 * s5 * s3s2s4 - c3c2s4 * c6s6 * d14 * s5 - c6s6 * c2s3c4 * d14 * s5 - c6s6 * c3s2c4 * d14 * s5) + 2 * ((-c5 * c5 - 1) * c6c6 * c2s2 * c3s3 * qrPP(0) + (-c4s4 * c5 * c5 - c4s4) * c6c6 * c2s2 * qrPP(0) + (-c4s4 * c5 * c5 - c4s4) * c6c6 * c3s3 * qrPP(0) + (c2c2 * c3c3 + c2c2 * c4c4 + c3c3 * c4c4 + c2c2 * c3c3 * c5c5 + c2c2 * c4c4 * c5c5 + c3c3 * c4c4 * c5c5) * c6c6 * qrPP(0) + c6s6c5 * c2s2 * qrPP(0) + c6s6c5 * c3s3 * qrPP(0) + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3 + c4s4 * c6s6c5) * qrPP(0) + 2 * ((c3s3 * c4s4) * c5 * c5 * c2c2 * c6c6 * qrPP(0) + (c3c3 * c2s2 * c4s4 + c4c4 * c2s2 * c3s3) * c5 * c5 * c6c6 * qrPP(0) + (-c3s3 * c6s6 - c4s4 * c6s6) * c5 * c2c2 * qrPP(0) + (-c3c3 * c2s2 * c6s6 - c4c4 * c2s2 * c6s6 - c3c3 * c4s4 * c6s6 - c4c4 * c3s3 * c6s6) * c5 * qrPP(0) + (c3s3 * c4s4 - c3c3 * c4c4 - c3c3 * c4c4 * c5c5) * c2c2 * c6c6 * qrPP(0) + (c3c3 * c2s2 * c4s4 + c4c4 * c2s2 * c3s3) * c6c6 * qrPP(0) + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * qrPP(0) + 2 * ((c4c4c3c3 - c4s4c3s3) * c5 * c2s2 * c6s6 * qrPP(0) + (c2c2c3c3 * c4s4 + c3s3 * c4c4c2c2) * c5 * c6s6 * qrPP(0)))) + 0.5 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * d22);
  Y(0, 40) = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5c5 * c6c6 * d22 + (c2c2 * qrPP(0) - qrPP(0) + c3c3 * qrPP(0) + c4c4 * qrPP(0)) * c5c5 * c6c6 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c5c5 * d22 + (qrPP(0) - c2c2 * qrPP(0) - c3c3 * qrPP(0) - c4c4 * qrPP(0)) * c5c5 + (c2 * c5 * s3 * s4 * s5 - c2 * c3 * c4 * c5 * s5 + c3 * c5 * s2 * s4 * s5 + c4 * c5 * s2 * s3 * s5) * c6c6 * d14 + (c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4) * c6c6 * d22 + (c2c2 * qrPP(0) + c3c3 * qrPP(0) + c4c4 * qrPP(0)) * c6c6 + (c3c2s4 * c6s6 * s5 + c6s6 * c2s3c4 * s5 + c6s6 * c3s2c4 * s5 - c6s6 * s5 * s3s2s4 - c2 * c5s5 * s3 * s4 - c3 * c5s5 * s2 * s4 - c4 * c5s5 * s2 * s3 + c2 * c3 * c4 * c5s5) * d14 + (b84 * d12 - a29 * b70 + b87 * d13 - b83 * d23 + b73 * d41 - b74 * d42 - b79 * d43 + b81 * qrPP(4)) + 2 * ((-c2c2 * c3c3 - c2c2 * c4c4 - c3c3 * c4c4) * c5c5 * c6c6 * qrPP(0) + (-c2s2 - c4s4) * c5c5 * c3s3 * qrPP(0) + (c2c2 * c3c3 + c2c2 * c4c4 + c3c3 * c4c4 - c2s2 * c4s4) * c5c5 * qrPP(0) + (c2s2 + c4s4 + c5 * c5 * c2s2 + c5 * c5 * c4s4) * c6c6 * c3s3 * qrPP(0) + (c2s2 * c4s4 * c5 * c5 - c2c2 * c3c3 - c2c2 * c4c4 - c3c3 * c4c4 + c2s2 * c4s4) * c6c6 * qrPP(0) + (-c6s6c5) * c3s3 * qrPP(0) + (-c2s2 * c6s6c5 - c4s4 * c6s6c5) * qrPP(0) + 2 * ((c4c4 * c6c6 - c4c4 * c5c5 + c4c4 * c5c5 * c6c6) * c2c2 * c3c3 * qrPP(0) + (c6s6 * c5 - c6c6 * c4s4 * c5 * c5 + c5c5 * c4s4 - c6c6 * c4s4) * c2c2 * c3s3 * qrPP(0) + (c5 * c4s4 * c6s6) * c2c2 * qrPP(0) + (c5 * c2s2 * c6s6 + c5 * c4s4 * c6s6 + c5c5 * c2s2 * c4s4 - c6c6 * c2s2 * c4s4 - c5 * c5 * c6c6 * c2s2 * c4s4) * c3c3 * qrPP(0) + (c4c4 * c6s6 * c5 - c4c4 * c6c6 * c2s2 * c5 * c5 + c4c4 * c5c5 * c2s2 - c4c4 * c6c6 * c2s2) * c3s3 * qrPP(0) + (c5 * c4c4 * c2s2 * c6s6) * qrPP(0) + 2 * ((c4s4c3s3 - c4c4c3c3) * c5 * c2s2 * c6s6 * qrPP(0) + (-c2c2c3c3 * c4s4 - c3s3 * c4c4c2c2) * c5 * c6s6 * qrPP(0)))) + 0.5 * ((s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * d22);
  Y(0, 41) = b32 * d14 - b30 * d13 - b37 * d12 - b34 * d23 + b35 * d22 + b89 * d41 - b88 * d43 - b36 * qrPP(0) - b47 * qrPP(5);
  Y(0, 42) = (s3s2s4 - c3s2c4 - c2s3c4) * a29 * s5 - a29 * c3c2s4 * s5 + c3c2s4 * d14 * s5 + (c2s3c4 + c3s2c4 - s3s2s4) * d14 * s5 + (b100 * d12 - b91 * d13 + b98 * d23 + b90 * d43 + b94 * d41 + b96 * d42 + b97 * qrPP(4)) + 2 * ((c3c2s4 + c2s3c4 + c3s2c4 - s3s2s4 - c5 * c5 * c3c2s4 - c5 * c5 * c2s3c4 - c5 * c5 * c3s2c4 + c5 * c5 * s3s2s4) * c6s6 * d22 + (c2c2 + c3c3 + c4c4 - c5c5 + c5 * c5 * c2c2 + c5 * c5 * c3c3 + c5 * c5 * c4c4) * c6s6 * qrPP(0) + (c2 * c5 * d14 * s3 * s4 - c2 * c3 * c4 * c5 * d14 + c3 * c5 * d14 * s2 * s4 + c4 * c5 * d14 * s2 * s3) * c6s6 * s5 + (-c5 * c2s2 - c5 * c3s3 - c5 * c4s4) * qrPP(0) + (a29 * c6c6 * c3c2s4 + a29 * c6c6 * c2s3c4 + a29 * c6c6 * c3s2c4 - c6c6 * c3c2s4 * d14 - c6c6 * c2s3c4 * d14 - c6c6 * c3s2c4 * d14 - a29 * c6c6 * s3s2s4 + c6c6 * d14 * s3s2s4) * s5 + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c5 * c5 * c6s6 * qrPP(0) + (c2s2 * c3 * c3 + c2c2 * s3 * c3 + c2c2 * c4s4 + c4c4 * c2s2 + c3c3 * c4s4 + c4c4 * c3s3 + c6c6 * c2s2 + c6c6 * c3s3 + c6c6 * c4s4) * c5 * qrPP(0) + (c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c6s6 * qrPP(0) + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c5 * c5 * c6s6 * qrPP(0) + (-c2c2 * c3s3 - c3c3 * c2s2 - c2c2 * c4s4 - c4c4 * c2s2 - c3c3 * c4s4 - c4c4 * c3s3) * c5 * c6c6 * qrPP(0) + (c2s2 * c4s4c3s3 - c2s2 * c4c4c3c3 - c3s3 * c4c4c2c2 - c2c2c3c3 * c4s4) * c5 * qrPP(0) + (c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c6s6 * qrPP(0) + 2 * ((c3c3 * c4s4 + c4c4 * c3s3) * c5 * c2c2 * c6c6 * qrPP(0) + (c3c3 * c4c4 * c2s2 - c2s2 * c3s3 * c4s4) * c5 * c6c6 * qrPP(0)))));
  Y(0, 43) = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5 * d14 * s6 + (c2 * c3 * c4 * c6 - c3 * c6 * s2 * s4 - c4 * c6 * s2 * s3 - c2 * c6 * s3 * s4) * c5 * d41 + (a29 * c3c2s4 + a29 * c2s3c4 + a29 * c3s2c4 - a29 * s3s2s4) * c5 * s6 + (c2 * c6 * s3 * s4 + c3 * c6 * s2 * s4 + c4 * c6 * s2 * s3 - c2 * c3 * c4 * c6) * d14 + (c5c5 * s3s2s4 - c5c5 * c2s3c4 - c5c5 * c3s2c4 - c5c5 * c3c2s4) * d41 * s6 + (b110 * d12 - b107 * d13 - a36 * b102 + b108 * d23 + b109 * d42 + b105 * qrPP(4) + b111 * qrPP(5)) + 2 * ((d22 * s3s2s4 - c2s3c4 * d22 - c3s2c4 * d22 - c3c2s4 * d22) * c5 * c6 * s5 + (c2c2 * c5s5 + c3c3 * c5s5 + c4c4 * c5s5) * c6 * qrPP(0) + (c2 * c3 * c4 * c5c5 * d14 - c2 * c5c5 * d14 * s3 * s4 - c3 * c5c5 * d14 * s2 * s4 - c4 * c5c5 * d14 * s2 * s3) * c6 + (-c2s2 * s6 - c3s3 * s6 - c4s4 * s6) * qrPP(0) * s5 + (-c5s5c6) * qrPP(0) + 2 * ((c2s2c3s3 - c4c4c2c2 - c4c4c3c3 - c2c2c3c3 + c4s4c2s2 + c4s4c3s3) * c6 * c5s5 * qrPP(0) + (c2s2 * s6 * c3 * c3 + c2c2 * s3 * s6 * c3 + c2c2 * c4s4 * s6 + c4c4 * c2s2 * s6 + c3c3 * c4s4 * s6 + c4c4 * c3s3 * s6) * qrPP(0) * s5 + 2 * ((c4c4c3c3c2c2 - c3c3c4s4c2s2 - c2c2c4s4c3s3 - c4c4c3s3c2s2) * c6 * c5s5 * qrPP(0) + (c2s2 * c4s4c3s3 * s6 - c2s2 * c4c4c3c3 * s6 - c3s3 * c4c4c2c2 * s6 - c2c2c3c3 * c4s4 * s6) * qrPP(0) * s5)));
  Y(0, 44) = (s3s2s4 - c2s3c4 - c3s2c4 - c3c2s4) * c5 * c6 * d14 + (a29 * c3c2s4 + a29 * c2s3c4 + a29 * c3s2c4 - a29 * s3s2s4) * c5 * c6 + (c2 * s3 * s4 * s6 + c3 * s2 * s4 * s6 + c4 * s2 * s3 * s6 - c2 * c3 * c4 * s6) * c5 * d41 + (c5c5 * s3s2s4 - c5c5 * c2s3c4 - c5c5 * c3s2c4 - c5c5 * c3c2s4) * c6 * d41 + (c2 * c3 * c4 * s6 - c3 * s2 * s4 * s6 - c4 * s2 * s3 * s6 - c2 * s3 * s4 * s6) * d14 + (b119 * d23 - b114 * d12 - b122 * d13 - a36 * b111 - b121 * d42 - b102 * qrPP(5) + b116 * qrPP(4)) + 2 * ((c3c2s4 * d22 + c2s3c4 * d22 + c3s2c4 * d22 - d22 * s3s2s4) * c5 * s5 * s6 + (-c6 * c2s2 - c6 * c3s3 - c6 * c4s4) * qrPP(0) * s5 + (-c2c2 * c5s5 - c3c3 * c5s5 - c4c4 * c5s5) * qrPP(0) * s6 + c5s5s6 * qrPP(0) + (c2 * c5c5 * d14 * s3 * s4 - c2 * c3 * c4 * c5c5 * d14 + c3 * c5c5 * d14 * s2 * s4 + c4 * c5c5 * d14 * s2 * s3) * s6 + 2 * ((c2s2 * s5 * c3 * c3 + c2c2 * s3 * s5 * c3 + c2c2 * c4s4 * s5 + c4c4 * c2s2 * s5 + c3c3 * c4s4 * s5 + c4c4 * c3s3 * s5) * c6 * qrPP(0) + (c2c2c3c3 + c4c4c2c2 + c4c4c3c3 - c2s2c3s3 - c4s4c2s2 - c4s4c3s3) * c5s5 * qrPP(0) * s6 + 2 * ((c2s2 * c4s4c3s3 * s5 - c2s2 * c4c4c3c3 * s5 - c3s3 * c4c4c2c2 * s5 - c2c2c3c3 * c4s4 * s5) * c6 * qrPP(0) + (c2c2c4s4c3s3 + c3c3c4s4c2s2 - c4c4c3c3c2c2 + c4c4c3s3c2s2) * c5s5 * qrPP(0) * s6)));
  Y(1, 1) = (-c1 * gx - gy * s1) * s2 + c2 * gz;
  Y(1, 2) = qrPP(1) + a1 * c2s2;
  Y(1, 3) = -a1 * c2s2;
  Y(1, 4) = a1 * c2s2;
  Y(1, 5) = qrPP(1);
  Y(1, 6) = -a1 * b2;
  Y(1, 7) = qrPP(0) * s2;
  Y(1, 8) = c2 * qrPP(0);
  Y(1, 9) = (-a39 * c1 - a38 * s1) * s2 + (a176 + a177 * c2 + a178 * c2s2);
  Y(1, 10) = (-a181 - a182 - a183) * s3 + (a180 * b5 + a179 * c3 - b123 * gx - b124 * gy + b13 * gz) + 2 * a59 * c3;
  Y(1, 11) = qrPP(1) + qrPP(2) + a1 * b8;
  Y(1, 12) = -a1 * b8;
  Y(1, 13) = a1 * b8;
  Y(1, 14) = qrPP(1) + qrPP(2);
  Y(1, 15) = a1 * b12;
  Y(1, 16) = b14 * qrPP(0);
  Y(1, 17) = b13 * qrPP(0);
  Y(1, 18) = (-a39 * c1 - a38 * s1) * s2 + (-a191 - a192 - a193) * s3 + (a176 + a184 + a185 - a49 * b124 - a50 * b123 + a190 * b5 + a189 * b8 + a188 * b13 + a177 * c2 + a187 * c3 + a178 * c2s2) + 2 * a186 * c3;
  Y(1, 19) = -a78 * b14 - a42 * s2;
  Y(1, 21) = a1 * b16;
  Y(1, 22) = -a1 * b16;
  Y(1, 23) = qrPP(1) + qrPP(2) + qrPP(3);
  Y(1, 24) = a1 * b125;
  Y(1, 25) = b20 * qrPP(0);
  Y(1, 26) = -b21 * qrPP(0);
  Y(1, 27) = (-a194 - a39 * c1 - a38 * s1) * s2 + (-a191 - a192 - a193) * s3 + (a176 + a184 + a185 - a49 * b124 - a50 * b123 + a190 * b5 + a189 * b8 + a188 * b13 - a195 * b14 + a177 * c2 + a187 * c3 + a178 * c2s2) + 2 * a186 * c3;
  Y(1, 28) = (a181 + a182 + a183 + a204 + a205 + a206 + a207 + a208) * b128 + (a198 + a199 + a200 + a201 + a202) * c4 + (a59 * b129 - a134 * b21 + a180 * b28 + a197 * b29 + b130 * d45 - b126 * gx - b127 * gy + b20 * gz + a196 * s4) + 2 * ((a61 + a62) * s4);
  Y(1, 29) = qrPP(1) + qrPP(2) + qrPP(3) + a1 * b16;
  Y(1, 30) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (a1 * b31 - b35 * d23 - b131 * d13 + b30 * qrPP(0));
  Y(1, 31) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b30 * qrPP(0));
  Y(1, 32) = -a1 * b16 - b38 * d23;
  Y(1, 33) = b132 * d22 - b40 * d23 - a1 * b39 - b41 * qrPP(0) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5);
  Y(1, 34) = a29 * c5 - a1 * b50 + b53 * d23 + b49 * qrPP(0) + qrPP(4) * s5;
  Y(1, 35) = b53 * qrPP(0) - b49 * d23 - a1 * b54 - a29 * s5 + c5 * qrPP(4);
  Y(1, 36) = (a158 + a159 + a162 + a163 + a164 + a167 + a168 + a171) * L2 * b128 + (a153 * b130 + a155 * b130) * L2 + (a221 + a222 + a223 + a224 + a225) * c4 + (-a191 - a192 - a193) * s3 + (a176 + a184 + a185 + a209 + a210 + a211 - a49 * b124 - a50 * b123 + a190 * b5 + a189 * b8 + a188 * b13 - a195 * b14 + a219 * b16 + a218 * b20 - a117 * b127 - a120 * b126 - a226 * b21 + a220 * b29 + a227 * b28 + a215 * b129 + a177 * c2 + a187 * c3 + a178 * c2s2 - a194 * s2 + a214 * s4 - a39 * c1 * s2 - a38 * s1 * s2) + 2 * ((a212 + a213) * s4 + a186 * c3);
  Y(1, 37) = (-a11 * b135 - a17 * b135 - a23 * b135 - a26 * b135 - a27 * b135 - a28 * b135) * L2 + (a146 + a181 + a182 + a183 + a204 + a205 + a206 + a207 + a208) * b140 + (-a237 - a238 - a239 - a240 - a241 - a242) * c5c4 + (a149 + a198 + a199 + a200 + a201 + a202) * s5s4 + (a134 * b47 - a78 * b66 - a148 * b53 + a180 * b67 + a197 * b55 - a143 * b138 + a236 * b54 - a156 * c5 - a196 * c4s5 + b49 * d48 + b139 * d37 - b136 * d45 + b133 * gx + b134 * gy + a173 * s5 - a42 * c5 * s2 - a147 * c5 * s4 + a174 * s2 * s5 + a175 * s2 * s5) + 2 * ((s3 * s5s4 - c3 * c4 * s5) * a59 + (-a61 - a62) * c4s5);
  Y(1, 38) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (b30 * qrPP(0) - b131 * d13 - b141 * d23 - a1 * b37);
  Y(1, 39) = (a11 + a17 + a23 + a26 + a27 + a28) * c6c6c5s5 + (a1 * b75 - a29 * c6s6c5 - b73 * d42 + b143 * d13 - b145 * d23 - b142 * d41 - b144 * d43 - b78 * qrPP(0) - c6s6s5 * qrPP(4));
  Y(1, 40) = a29 * c6s6c5 - a1 * b84 + b73 * d42 - b148 * d13 + b146 * d22 - b147 * d23 + b142 * d41 + b144 * d43 + b87 * qrPP(0) + c6s6s5 * qrPP(4);
  Y(1, 41) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b89 * d42 - b30 * qrPP(0) + c5 * qrPP(5)) + 0.5 * ((-a30 - a35) * s5);
  Y(1, 42) = a29 * b151 - a1 * b100 + b94 * d42 - b152 * d13 - b150 * d23 - b149 * d41 - b91 * qrPP(0) - b153 * qrPP(4) + 2 * ((a30 + a35) * c6s6s5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c6s6c5s5);
  Y(1, 43) = (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5s6 + (a29 - a36) * s6s5 + (b154 * d23 - a1 * b110 - b155 * d22 + b156 * d42 - b107 * qrPP(0) - c5s6 * qrPP(4) + c6s5 * qrPP(5)) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5c6);
  Y(1, 44) = (a29 - a36) * c6s5 + (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5c6 + (a1 * b114 + b157 * d23 - b158 * d22 + b159 * d42 - b122 * qrPP(0) - c6c5 * qrPP(4) - qrPP(5) * s6s5) + 2 * ((-qrPP(1) - qrPP(2) - qrPP(3)) * c5s5s6);
  Y(2, 10) = a180 * b7 + a59 * c3 - b123 * gx - b124 * gy + b13 * gz + a60 * s3;
  Y(2, 11) = qrPP(1) + qrPP(2) + a1 * b8;
  Y(2, 12) = -a1 * b8;
  Y(2, 13) = a1 * b8;
  Y(2, 14) = qrPP(1) + qrPP(2);
  Y(2, 15) = a1 * b12;
  Y(2, 16) = b14 * qrPP(0);
  Y(2, 17) = b13 * qrPP(0);
  Y(2, 18) = a184 + a185 - a49 * b124 - a50 * b123 + a189 * b8 + a190 * b7 + a188 * b13 + a186 * c3 + a249 * s3;
  Y(2, 19) = -a78 * b14;
  Y(2, 21) = a1 * b16;
  Y(2, 22) = -a1 * b16;
  Y(2, 23) = qrPP(1) + qrPP(2) + qrPP(3);
  Y(2, 24) = a1 * b125;
  Y(2, 25) = b20 * qrPP(0);
  Y(2, 26) = -b21 * qrPP(0);
  Y(2, 27) = a184 + a185 - a49 * b124 - a50 * b123 + a189 * b8 + a190 * b7 + a188 * b13 - a195 * b14 + a186 * c3 + a249 * s3;
  Y(2, 28) = (a198 + a199 + a200 + a201 + a202) * c4 + (a59 * b130 - a60 * b128 - a134 * b21 + a180 * b23 + a197 * b29 - b126 * gx - b127 * gy + b20 * gz + a196 * s4) + 2 * ((a61 + a62) * s4);
  Y(2, 29) = qrPP(1) + qrPP(2) + qrPP(3) + a1 * b16;
  Y(2, 30) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (a1 * b31 - b35 * d23 - b131 * d13 + b30 * qrPP(0));
  Y(2, 31) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b30 * qrPP(0));
  Y(2, 32) = -a1 * b16 - b38 * d23;
  Y(2, 33) = b132 * d22 - b40 * d23 - a1 * b39 - b41 * qrPP(0) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5);
  Y(2, 34) = a29 * c5 - a1 * b50 + b53 * d23 + b49 * qrPP(0) + qrPP(4) * s5;
  Y(2, 35) = b53 * qrPP(0) - b49 * d23 - a1 * b54 - a29 * s5 + c5 * qrPP(4);
  Y(2, 36) = (a221 + a222 + a223 + a224 + a225) * c4 + (a184 + a185 + a209 + a210 + a211 - a49 * b124 - a50 * b123 + a189 * b8 + a190 * b7 + a188 * b13 - a195 * b14 + a219 * b16 + a218 * b20 - a117 * b127 - a120 * b126 - a226 * b21 + a220 * b29 + a227 * b23 + a215 * b130 - a250 * b128 + a186 * c3 + a214 * s4 + a249 * s3) + 2 * ((a212 + a213) * s4);
  Y(2, 37) = (-a156 - a147 * s4) * c5 + (-a237 - a238 - a239 - a240 - a241 - a242) * c5c4 + (a149 + a198 + a199 + a200 + a201 + a202) * s5s4 + (a134 * b47 - a78 * b66 - a59 * b136 - a60 * b140 - a148 * b53 - a180 * b57 + a197 * b55 + a236 * b54 - a196 * c4s5 + b49 * d48 + b139 * d37 + b133 * gx + b134 * gy + a173 * s5) + 2 * ((-a61 - a62) * c4s5);
  Y(2, 38) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (b30 * qrPP(0) - b131 * d13 - b141 * d23 - a1 * b37);
  Y(2, 39) = (a11 + a17 + a23 + a26 + a27 + a28) * c6c6c5s5 + (a1 * b75 - a29 * c6s6c5 - b73 * d42 + b143 * d13 - b145 * d23 - b142 * d41 - b144 * d43 - b78 * qrPP(0) - c6s6s5 * qrPP(4));
  Y(2, 40) = a29 * c6s6c5 - a1 * b84 + b73 * d42 - b148 * d13 + b146 * d22 - b147 * d23 + b142 * d41 + b144 * d43 + b87 * qrPP(0) + c6s6s5 * qrPP(4);
  Y(2, 41) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b89 * d42 - b30 * qrPP(0) + c5 * qrPP(5)) + 0.5 * ((-a30 - a35) * s5);
  Y(2, 42) = a29 * b151 - a1 * b100 + b94 * d42 - b152 * d13 - b150 * d23 - b149 * d41 - b91 * qrPP(0) - b153 * qrPP(4) + 2 * ((a30 + a35) * c6s6s5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c6s6c5s5);
  Y(2, 43) = (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5s6 + (a29 - a36) * s6s5 + (b154 * d23 - a1 * b110 - b155 * d22 + b156 * d42 - b107 * qrPP(0) - c5s6 * qrPP(4) + c6s5 * qrPP(5)) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5c6);
  Y(2, 44) = (a29 - a36) * c6s5 + (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5c6 + (a1 * b114 + b157 * d23 - b158 * d22 + b159 * d42 - b122 * qrPP(0) - c6c5 * qrPP(4) - qrPP(5) * s6s5) + 2 * ((-qrPP(1) - qrPP(2) - qrPP(3)) * c5s5s6);
  Y(3, 21) = a1 * b16;
  Y(3, 22) = -a1 * b16;
  Y(3, 23) = qrPP(1) + qrPP(2) + qrPP(3);
  Y(3, 24) = a1 * b125;
  Y(3, 25) = b20 * qrPP(0);
  Y(3, 26) = -b21 * qrPP(0);
  Y(3, 28) = (-a63 - a64 - a65 - a66) * c4 + (a61 + a62) * s4 + (a59 * b130 - a60 * b128 - a134 * b21 + a180 * b23 + a197 * b27 - b126 * gx - b127 * gy + b20 * gz);
  Y(3, 29) = qrPP(1) + qrPP(2) + qrPP(3) + a1 * b16;
  Y(3, 30) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (a1 * b31 - b35 * d23 - b131 * d13 + b30 * qrPP(0));
  Y(3, 31) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b30 * qrPP(0));
  Y(3, 32) = -a1 * b16 - b38 * d23;
  Y(3, 33) = b132 * d22 - b40 * d23 - a1 * b39 - b41 * qrPP(0) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5);
  Y(3, 34) = a29 * c5 - a1 * b50 + b53 * d23 + b49 * qrPP(0) + qrPP(4) * s5;
  Y(3, 35) = b53 * qrPP(0) - b49 * d23 - a1 * b54 - a29 * s5 + c5 * qrPP(4);
  Y(3, 36) = (-a157 - a158 - a159 - a163) * L3 * c4 + (a212 + a213) * s4 + (a209 + a210 + a211 + a219 * b16 + a218 * b20 - a117 * b127 - a120 * b126 + a220 * b27 - a226 * b21 + a227 * b23 + a215 * b130 - a250 * b128);
  Y(3, 37) = (-a61 - a62) * c4s5 + (-a63 - a64 - a65 - a66) * s5s4 + (a134 * b47 - a59 * b136 - a60 * b140 - a148 * b53 - a180 * b57 + a197 * b64 + a236 * b54 - a156 * c5 + b49 * d48 + b133 * gx + b134 * gy + a173 * s5);
  Y(3, 38) = (a11 + a17 + a23 + a26 + a27 + a28) * c5s5 + (b30 * qrPP(0) - b131 * d13 - b141 * d23 - a1 * b37);
  Y(3, 39) = (a11 + a17 + a23 + a26 + a27 + a28) * c6c6c5s5 + (a1 * b75 - a29 * c6s6c5 - b73 * d42 + b143 * d13 - b145 * d23 - b142 * d41 - b144 * d43 - b78 * qrPP(0) - c6s6s5 * qrPP(4));
  Y(3, 40) = a29 * c6s6c5 - a1 * b84 + b73 * d42 - b148 * d13 + b146 * d22 - b147 * d23 + b142 * d41 + b144 * d43 + b87 * qrPP(0) + c6s6s5 * qrPP(4);
  Y(3, 41) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5c5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c5s5 + (a1 * b37 + b35 * d23 - b89 * d42 - b30 * qrPP(0) + c5 * qrPP(5)) + 0.5 * ((-a30 - a35) * s5);
  Y(3, 42) = a29 * b151 - a1 * b100 + b94 * d42 - b152 * d13 - b150 * d23 - b149 * d41 - b91 * qrPP(0) - b153 * qrPP(4) + 2 * ((a30 + a35) * c6s6s5 + (-a11 - a17 - a23 - a26 - a27 - a28) * c6s6c5s5);
  Y(3, 43) = (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5s6 + (a29 - a36) * s6s5 + (b154 * d23 - a1 * b110 - b155 * d22 + b156 * d42 - b107 * qrPP(0) - c5s6 * qrPP(4) + c6s5 * qrPP(5)) + 2 * ((qrPP(1) + qrPP(2) + qrPP(3)) * c5s5c6);
  Y(3, 44) = (a29 - a36) * c6s5 + (-a12 - a18 - a24 - a32 - a33 - a34) * c5s5c6 + (a1 * b114 + b157 * d23 - b158 * d22 + b159 * d42 - b122 * qrPP(0) - c6c5 * qrPP(4) - qrPP(5) * s6s5) + 2 * ((-qrPP(1) - qrPP(2) - qrPP(3)) * c5s5s6);
  Y(4, 30) = (-a8 - a9 - a10 - a14 - a15 - a16 - a20 - a21 - a22) * c5s5 + (b35 * d12 - a1 * b34);
  Y(4, 31) = (a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22) * c5s5 + (a1 * b34 - b35 * d12);
  Y(4, 32) = qrPP(4) + b38 * d12 + b21 * qrPP(0);
  Y(4, 33) = a1 * b42 + b40 * d12 - b132 * d14;
  Y(4, 34) = (qrPP(1) + qrPP(2) + qrPP(3)) * s5 + (a1 * b46 - b53 * d12 + b48 * qrPP(0));
  Y(4, 35) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5 + (a1 * b51 + b49 * d12 - b47 * qrPP(0));
  Y(4, 37) = (c1 * c3 * gx + c3 * gy * s1) * c5 * s2 * s4 + (c4 * gy * s1 * s3 + c1 * c4 * gx * s3) * c5 * s2 + (c2 * gy * s1 * s3 - a62 - a61 + c1 * c2 * gx * s3) * c5 * s4 + (-a152 - a153 - a155 - c1 * c2 * c3 * c4 * gx - c2 * c3 * c4 * gy * s1) * c5 + (-a43 - a44) * s2 * s5 + (L4 * a1 + a42 * c2 + c1 * gy - gx * s1) * s5 + (a78 * b62 + a134 * b53 + a60 * b135 + a148 * b47 - a59 * b138 - a180 * b58 - a197 * b60 - a236 * b51 + a63 * c5c4 + a64 * c5c4 + a65 * c5c4 + a66 * c5c4 - b49 * d34 - b139 * d20 - b48 * gz);
  Y(4, 38) = (-a8 - a9 - a10 - a14 - a15 - a16 - a20 - a21 - a22) * c5s5 + (qrPP(4) - a1 * b34 + b141 * d12 + b21 * qrPP(0));
  Y(4, 39) = (a30 + a35) * c6s6 + (-qrPP(1) - qrPP(2) - qrPP(3)) * c6s6s5 + (-a8 - a9 - a10 - a14 - a15 - a16 - a20 - a21 - a22) * c6c6c5s5 + (1 - c6c6) * qrPP(4) + (b79 * d42 - a1 * b72 + b145 * d12 - b144 * d41 - b76 * qrPP(0));
  Y(4, 40) = (-a30 - a35) * c6s6 + (qrPP(1) + qrPP(2) + qrPP(3)) * c6s6s5 + (a1 * b83 - b79 * d42 + b147 * d12 - b146 * d14 + b144 * d41 + b81 * qrPP(0) + c6c6 * qrPP(4));
  Y(4, 41) = (a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22) * c5s5 + (a1 * b34 - b35 * d12 + b88 * d42) + 0.5 * ((a12 + a18 + a24 + a32 + a33 + a34) * s5);
  Y(4, 42) = b90 * d42 - a1 * b98 + b150 * d12 - b153 * d13 + b163 * d43 + b97 * qrPP(0) + 2 * ((a12 + a18 + a24 + a32 + a33 + a34) * c6s6s5 + (a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22) * c6s6c5s5 + c6s6 * qrPP(4));
  Y(4, 43) = (-a12 - a18 - a24 - a32 - a33 - a34) * c6c5 + (-qrPP(1) - qrPP(2) - qrPP(3)) * c5s6 + (b116 * d42 - a36 * c6 - a1 * b108 - b154 * d12 + b155 * d14 + b105 * qrPP(0) - qrPP(5) * s6);
  Y(4, 44) = (-qrPP(1) - qrPP(2) - qrPP(3)) * c6c5 + (a12 + a18 + a24 + a32 + a33 + a34) * c5s6 + (b158 * d14 - b105 * d42 - b157 * d12 - a1 * b119 + b116 * qrPP(0) + a36 * s6 - c6 * qrPP(5));
  Y(5, 39) = b73 * d12 - a29 * c6s6 - a1 * b74 - b79 * d23 + b142 * d14 + b144 * d22;
  Y(5, 40) = a1 * b74 + a29 * c6s6 - b73 * d12 + b79 * d23 - b142 * d14 - b144 * d22;
  Y(5, 41) = (qrPP(1) + qrPP(2) + qrPP(3)) * c5 + (qrPP(5) + b89 * d12 - b88 * d23 - b47 * qrPP(0)) + 0.5 * ((-a11 - a17 - a23 - a26 - a27 - a28) * s5);
  Y(5, 42) = b149 * d14 - a29 * b163 - b94 * d12 - b90 * d23 - a1 * b96 + 2 * ((-a11 - a17 - a23 - a26 - a27 - a28) * c6s6s5);
  Y(5, 43) = (a11 + a17 + a23 + a26 + a27 + a28) * c6c5 + (qrPP(1) + qrPP(2) + qrPP(3)) * c6s5 + (a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22) * c5s5s6 + (b111 * qrPP(0) - b116 * d23 - b156 * d12 - a1 * b109 - qrPP(4) * s6);
  Y(5, 44) = (-a11 - a17 - a23 - a26 - a27 - a28) * c5s6 + (a8 + a9 + a10 + a14 + a15 + a16 + a20 + a21 + a22) * c5s5c6 + (-qrPP(1) - qrPP(2) - qrPP(3)) * s6s5 + (a1 * b121 + b105 * d23 - b159 * d12 - b102 * qrPP(0) - c6 * qrPP(4));
}

#endif
